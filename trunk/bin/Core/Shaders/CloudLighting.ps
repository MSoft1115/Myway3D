/////////////////////////////////////////////////////////////////////////
//
//
//

struct PS_IN
{
	float2 uv0 : TEXCOORD0;
};


uniform float2 gWeight;
uniform float gMass;
uniform float4 gLightingParam;
uniform float4 gAlphaParam;
uniform float4 gSunUV;
uniform float4 gUVScale;
uniform float4 gUVScroll;

uniform sampler2D gTex_Layer0;
uniform sampler2D gTex_Layer1;


float Gaussian(float x, float gm)
{
    gm = 1.0f / gm;

    float e = -x * x * 0.5f * gm * gm;

    return  1.0f / sqrt(3.1415926 * 2) * gm * exp(e);
}

float4 main(PS_IN In) : COLOR
{
	float3 uvRay = float3(gSunUV.xy - In.uv0, 0.01f);
	uvRay = normalize(uvRay);

	float uvStep = 1.5f / 1024.0f;
	
	float lighting = 0;
	
	for (int i = 0; i < 4; ++i)
	{
		float2 uv = In.uv0 + uvStep * i * uvRay.xy;
		float2 uvLayer0 = uv * gUVScale.x + gUVScroll.xy;
		float2 uvLayer1 = uv * gUVScale.y + gUVScroll.zw;

		float d = tex2D(gTex_Layer0, uvLayer0).r * gWeight.x;
		d += tex2D(gTex_Layer1, uvLayer1).r * gWeight.y;
		
		d -= gMass;
		d = saturate(d);
		
		float lt = Gaussian(d * gLightingParam.x, 2) / Gaussian(0, 2);
		
		lighting += lt / 16;
	};

	for (int i = 4; i < 32; ++i)
	{
		float2 uv = In.uv0 + uvStep * i * uvRay.xy;
		float2 uvLayer0 = uv * gUVScale.x + gUVScroll.xy;
		float2 uvLayer1 = uv * gUVScale.y + gUVScroll.zw;

		float d = tex2D(gTex_Layer0, uvLayer0).r * gWeight.x;
		d += tex2D(gTex_Layer1, uvLayer1).r * gWeight.y;
		
		d -= gMass;
		d = saturate(d);
		
		float lt = Gaussian(d * gLightingParam.x, 2) / Gaussian(0, 2);
		
		lighting += lt / 32.0f;
	};
	
	return float4(lighting, lighting, lighting, 1);
}