/////////////////////////////////////////////////////////////////////////
//
//
//

struct PS_IN
{
	float2 uv0 : TEXCOORD0;
};

float Gaussian(float x, float gm)
{
    gm = 1.0f / gm;

    float e = -x * x * 0.5f * gm * gm;

    return  1.0f / sqrt(3.1415926 * 2) * gm * exp(e);
}

uniform float4 gInvTexSize;
uniform sampler2D gTex;

float4 main(PS_IN In) : COLOR
{
	float4 color = float4(0, 0, 0, 0);
	
	float y = gInvTexSize.y;
	
	for (int i = 0; i < 13; ++i)
	{
		float2 uv = In.uv0 + float2(0, (i - 6) * y);
		color += tex2D(gTex, uv) * Gaussian(i - 6, 2);
	}
	
	//color /= 13;
    
	return color;
}