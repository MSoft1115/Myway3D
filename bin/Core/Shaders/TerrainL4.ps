/////////////////////////////////////////////////////////////////////////
//
//
//

struct PS_IN
{
    float2 tcoord0		: TEXCOORD0;
    float4 tcoord12		: TEXCOORD1;
    float4 tcoord34		: TEXCOORD2;
    float4 normalDepth 	: TEXCOORD3;
	float3 T			: TEXCOORD4;
	float3 B			: TEXCOORD5;
	float3 N			: TEXCOORD6;
};

struct PS_OUT
{
    float4 color	: COLOR0;
    float4 normal	: COLOR1;
    float4 material : COLOR2;
    float4 depth	: COLOR3;
};

uniform sampler2D tex_blend : register(s0);
uniform sampler2D tex_detail0 : register(s1);
uniform sampler2D tex_detail1 : register(s2);
uniform sampler2D tex_detail2 : register(s3);
uniform sampler2D tex_detail3 : register(s4);

uniform sampler2D tex_normal0 : register(s5);
uniform sampler2D tex_normal1 : register(s6);
uniform sampler2D tex_normal2 : register(s7);
uniform sampler2D tex_normal3 : register(s8);

uniform float4 gClipPlane;


PS_OUT main(PS_IN In)
{
    PS_OUT Out = (PS_OUT)0;
    
    float4 weight = tex2D(tex_blend, In.tcoord0);
    
    Out.color = tex2D(tex_detail0, In.tcoord12.xy) * weight.a +
                tex2D(tex_detail1, In.tcoord12.zw) * weight.r +
                tex2D(tex_detail2, In.tcoord34.xy) * weight.g +
                tex2D(tex_detail3, In.tcoord34.zw) * weight.b;
   
   float4 normal = tex2D(tex_normal0, In.tcoord12.xy) * weight.a +
				   tex2D(tex_normal1, In.tcoord12.zw) * weight.r +
                   tex2D(tex_normal2, In.tcoord34.xy) * weight.g +
                   tex2D(tex_normal3, In.tcoord34.zw) * weight.b;

	normal.xyz = normal.xyz * 2 - 1;
	//normal.xyz = float3(0, 0, 1);

    //Out.normal = float4(In.normalDepth.xyz, 1);
	float3x3 matTBN = float3x3(In.T, In.B, In.N);
    Out.normal = float4(mul(normal.xyz, matTBN), 1);
    Out.material = float4(0, 0, 0, 0);
    Out.depth = float4(In.normalDepth.w * gClipPlane.w, 0, 0, 1);
       
    return Out;
}


